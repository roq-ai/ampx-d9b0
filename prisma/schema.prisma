generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model emergency {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  service_request_id String          @db.Uuid
  emergency_type     String          @db.VarChar(255)
  status             String          @db.VarChar(50)
  created_at         DateTime        @default(now()) @db.Timestamp(6)
  updated_at         DateTime        @default(now()) @db.Timestamp(6)
  service_request    service_request @relation(fields: [service_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model provider {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description     String?           @db.VarChar(255)
  name            String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  user_id         String            @db.Uuid
  tenant_id       String            @db.VarChar(255)
  user            user              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service_history service_history[]
  service_request service_request[]
}

model service_history {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  service_request_id String          @db.Uuid
  provider_id        String          @db.Uuid
  start_time         DateTime        @db.Timestamp(6)
  end_time           DateTime?       @db.Timestamp(6)
  created_at         DateTime        @default(now()) @db.Timestamp(6)
  updated_at         DateTime        @default(now()) @db.Timestamp(6)
  provider           provider        @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service_request    service_request @relation(fields: [service_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model service_request {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vehicle_id      String            @db.Uuid
  provider_id     String            @db.Uuid
  service_type    String            @db.VarChar(255)
  location        String            @db.VarChar(255)
  status          String            @db.VarChar(50)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  emergency       emergency[]
  service_history service_history[]
  provider        provider          @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vehicle         vehicle           @relation(fields: [vehicle_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  provider    provider[]
  vehicle     vehicle[]
}

model vehicle {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  make            String            @db.VarChar(255)
  model           String            @db.VarChar(255)
  year            Int
  color           String            @db.VarChar(50)
  license_plate   String            @unique @db.VarChar(50)
  user_id         String            @db.Uuid
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  service_request service_request[]
  user            user              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
